#+TITLE Emacs Lisp: Value-in-list
This function implements so of the functionality associated with Common Lisp's implementation of =member=. In particular it implements an optional =test= parameter.

* RATIONALE 
Emacs Lisp's =member= function compares a value to the contents of a list using equality. Emacs Lisp [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Sets-And-Lists.html][contains additional functions]] to determine membership based on stricter and looser criteria for determining under set semantics.

For example working with string values:
#+BEGIN_EXAMPLE
ELISP> (member "PRINTED VALUE" '("unprinted value" "printed value")) 
nil
ELISP> (member-ignore-case "PRINTED VALUE" '("unprinted value" "printed value")) 
("printed value")
#+END_EXAMPLE
Or based on strict identity with =memq=:
#+BEGIN_EXAMPLE
ELSIP> (let ((a 'b))
          (memq a '(c b d)))
(b d)
#+END_EXAMPLE
But there is not a function for working with numerical values of different types:
#+BEGIN_EXAMPLE
ELISP> (member '2.0 '(1 2 3))
nil
#+END_EXAMPLE

* IMPLEMENTATION

#+BEGIN_SRC elisp :tangle yes
  (defun value-in-list (value list &optional test)
  "Uses test to determin if value is in list.
   If value is in in list, returns the cdr of the list
   which begins with value: the return value mimics the behavior of MEMBER.
   Example: (my-member 3.0 '(1 2 3) '=) -> (3)
            (my-member '(1) '((1) (2) (3)) 'eq) -> nil
   Remarks: This function could in theory be structured as the local function
   'my-member, but Emacs-Lisp runs out of stack space if 'eq or 'eql are passed
   to 'my-member within another function. Seems like a bug."
  (let
      ((my-member (lambda (value list test)
                    (if (funcall test value (car list))
                        list
                      (my-member value (cdr list) test)))))
    (cond
     ((null test)
      (member value list))
     ((eq test 'eq)
      (memq value list))
     ((eq test 'eql)
      (memql value list))
     (t (funcall my-member value list test)))))

#+END_SRC

** Examples
#+BEGIN_EXAMPLE
ELISP> (value-in-list 2 '(1 2 3))
(2 3)

ELISP> (value-in-list '(2) '(1 (2) 3))
((2)
 3)

ELISP> (value-in-list 1 '(1 2 3) #'(lambda (x y) (< x y)))
(2 3)

ELISP> (value-in-list 2.0 '(1 2 3) '=)
(2 3)

ELISP> (value-in-list 2
                     '(1 (2) 3)
                     #'(lambda (x y) (if (consp y)
                                     (= x (car y)))))
((2)
 3)

#+END_EXAMPLE

* APPENDIX
** Using this file
1. The output for this file is =elisp-member.el=
2. The web page for this file is =docs/index.html=. It is structured to work with Github pages.
3. To generate these files, navigate into the source block and use =M-x org-babel-execute-src-block=. 
#+NAME: generate-files
#+BEGIN_SRC elisp
  ;; generate elisp-member.el
  (org-babel-tangle)
  ;; generate docs/index.html
  (org-html-export-as-html)
  (save-current-buffer
    (set-buffer "*Org HTML Export*")
    (write-file "docs/index.html")
    (kill-buffer))
  (concat "Files Generated: " (current-time-string))
#+END_SRC 
